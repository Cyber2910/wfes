Only in wang/: Makefile
Only in wang/: __init__.py
--- tmp/attacks/fextractor.py
+++ wang/fextractor.py
@@ -1,13 +1,8 @@
-import sys
-import subprocess
-import numpy
-import os
-from loaders import *
+def extract(times, sizes):
+    features = []
 
-def extract(times, sizes, features):
-
     #Transmission size features
-    features.append(len(sizes))
+    features.append(len(times))
 
     count = 0
     for x in sizes:
@@ -19,11 +14,11 @@
     features.append(times[-1] - times[0])
 
     #Unique packet lengths
-##    for i in range(-1500, 1501):
-##        if i in sizes:
-##            features.append(1)
-##        else:
-##            features.append(0)
+    for i in range(-1500, 1501):
+        if i in sizes:
+            features.append(1)
+        else:
+            features.append(0)
 
     #Transpositions (similar to good distance scheme)
     count = 0
@@ -31,9 +26,9 @@
         if sizes[i] > 0:
             count += 1
             features.append(i)
-        if count == 500:
+        if count == 300:
             break
-    for i in range(count, 500):
+    for i in range(count, 300):
         features.append("X")
         
     count = 0
@@ -43,14 +38,13 @@
             count += 1
             features.append(i - prevloc)
             prevloc = i
-        if count == 500:
+        if count == 300:
             break
-    for i in range(count, 500):
+    for i in range(count, 300):
         features.append("X")
 
 
     #Packet distributions (where are the outgoing packets concentrated)
-    count = 0
     for i in range(0, min(len(sizes), 3000)):
         if i % 30 != 29:
             if sizes[i] > 0:
@@ -67,136 +61,91 @@
     stopped = 0
     for x in sizes:
         if x < 0:
+            stopped = 0
             curburst -= x
-        if x > 0:
-            if len(bursts) > 0:
-                if bursts[-1] != curburst:
-                    bursts.append(curburst)
-            else:
-                bursts.append(curburst)
-    if (len(bursts) > 0):
-        features.append(max(bursts))
-        features.append(numpy.mean(bursts))
-        features.append(len(bursts))
-    else:
-        features.append("X")
-        features.append("X")
-        features.append("X")
-##    print bursts
-    counts = [0, 0, 0, 0, 0, 0]
+        if x > 0 and stopped == 0:
+            stopped = 1
+        if x > 0 and stopped == 1:
+            stopped = 0
+            bursts.append(curburst)
+    features.append(max(bursts))
+    features.append(sum(bursts)/len(bursts))
+    features.append(len(bursts))
+    counts = [0, 0, 0]
     for x in bursts:
-        if x > 2:
-            counts[0] += 1
         if x > 5:
-            counts[1] += 1
+            counts[0] += 1
         if x > 10:
-            counts[2] += 1
+            counts[1] += 1
         if x > 15:
-            counts[3] += 1
-        if x > 20:
-            counts[4] += 1
-        if x > 50:
-            counts[5] += 1
+            counts[2] += 1
     features.append(counts[0])
     features.append(counts[1])
     features.append(counts[2])
-    features.append(counts[3])
-    features.append(counts[4])
-    features.append(counts[5])
-    for i in range(0, 100):
+    for i in range(0, 5):
         try:
             features.append(bursts[i])
         except:
             features.append("X")
 
-    for i in range(0, 10):
+    for i in range(0, 20):
         try:
             features.append(sizes[i] + 1500)
         except:
             features.append("X")
 
-    itimes = [0]*(len(sizes)-1)
-    for i in range(1, len(sizes)):
-        itimes[i-1] = times[i] - times[i-1]
-    features.append(numpy.mean(itimes))
-    features.append(numpy.std(itimes))
+    return features
 
-def flog(msg, fname):
-    f = open(fname, "a+")
-    f.write(repr(time.time()) + "\t" + str(msg) + "\n")
-    f.close()    
-
-def log(msg):
-    LOG_FILE = d["OUTPUT_LOC"] + sys.argv[0].split("/")[-1] + ".log"
-    flog(msg, LOG_FILE)
-
-def rlog(msg):
-    LOG_FILE = d["OUTPUT_LOC"] + sys.argv[0].split("/")[-1] + ".results"
-    flog(msg, LOG_FILE)
-
-try:
-    optfname = sys.argv[1]
-    d = load_options(optfname)
-except Exception,e:
-    print sys.argv[0], str(e)
-    sys.exit(0)
-
-traindata, trainnames = load_listn(d["TRAIN_LIST"])
-testdata, testnames = load_listn(d["TEST_LIST"])
-weightdata, weightnames = load_listn(d["WEIGHT_LIST"])
-
-flist = []
-for s in trainnames:
-    for n in s:
-        flist.append(n)
-
-for s in testnames:
-    for n in s:
-        flist.append(n)
-
-for s in weightnames:
-    for n in s:
-        flist.append(n)
-
-if os.path.isfile(flist[0] + "f"):
-    print flist[0] + "f already exists, fextractor.py stopping"
-    sys.exit(0)
-
-for fname in flist:
-    if "-0.cell" in fname:
-        print fname
-    try:
-        f = open(fname + "f", "r")
-        continue
-    except:
-        pass
-    f = open(fname, "r")
-##        f = open(fold + fname + ".cell", "r")
     
-    #Set up times, sizes
-    times = []
-    sizes = []
-    for x in f:
-##        sizes.append(int(x))
-        x = x.split("\t")
-        times.append(float(x[0]))
-        sizes.append(int(x[1]))
-    f.close()
-
-    #Extract features. All features are non-negative numbers or X. 
-    features = []
-        
-    try: 
+if __name__ == '__main__':
+    #this takes quite a while
+    for site in range(0, 100):
+        #print site
+        for instance in range(0, 90):
+            fname = str(site) + "-" + str(instance)
+            #Set up times, sizes
+            f = open("batch/" + fname, "r")
+            times = []
+            sizes = []
+            for x in f:
+                x = x.split("\t")
+                times.append(float(x[0]))
+                sizes.append(int(x[1]))
+            f.close()
+    
+            #Extract features. All features are non-negative numbers or X. 
+            features = []
+            extract(times, sizes, features)
+    
+            fout = open("batch/" + fname + "f", "w")
+            for x in features:
+                fout.write(repr(x) + " ")
+            fout.close()
+    
+    #open world
+    for site in range(0, 9000):
+        #print site
+        fname = str(site)
+        #Set up times, sizes
+        f = open("batch/" + fname, "r")
+        times = []
+        sizes = []
+        for x in f:
+            x = x.split("\t")
+            times.append(float(x[0]))
+            sizes.append(int(x[1]))
+        f.close()
+    
+        #Extract features. All features are non-negative numbers or X. 
+        features = []
         extract(times, sizes, features)
-
-        fout = open(fname + "f", "w")
+    
+        fout = open("batch/" + fname + "f", "w")
         for x in features:
             fout.write(repr(x) + " ")
         fout.close()
-    except:
-        pass
-
-##    f = open("fdetails", "w")
-##    f.write(str(len(features)))
-##    print len(features)
-##    f.close()
+    
+    f = open("fdetails", "w")
+    f.write(str(len(features)))
+    print len(features)
+    f.close()
--- tmp/attacks/flearner.cpp
+++ wang/flearner.cpp
@@ -5,38 +5,26 @@
 #include <string.h>
 #include <sstream>
 #include <time.h>
-#include <stdio.h>
 #include <stdlib.h>
 #include <algorithm>
-#include <map>
-//#include "loader.h"
 using namespace std;
 
 //Data parameters
-int FEAT_NUM = 0; //number of features
-int ROUND_NUM = 5000000;
-int NEIGHBOUR_NUM = 1; //number of neighbors for kNN
-int RECOPOINTS_NUM = 5; //number of neighbors for distance learning
-int TRAIN_CLOSED_SITENUM, TRAIN_CLOSED_INSTNUM, TRAIN_OPEN_INSTNUM, 
-    TEST_CLOSED_SITENUM, TEST_CLOSED_INSTNUM, TEST_OPEN_INSTNUM;
-int OPEN_MAJORITY = 1;
-map<string, string> d;
+int FEAT_NUM = 3736; //number of features
 
-bool inarray(int ele, int* array, int len) {
-	for (int i = 0; i < len; i++) {
-		if (array[i] == ele)
-			return 1;
-	}
-	return 0;
-}
+//const int SITE_NUM = 100; //number of monitored sites
+//const int INST_NUM = 60; //number of instances per site for distance learning
+//const int TEST_NUM = 30; //number of instances per site for kNN training/testing
+//int OPENTEST_NUM = 0; //number of open instances for kNN training/testing
 
-void alg_init_weight(float* weight) {
-	for (int i = 0; i < FEAT_NUM; i++) {
-		weight[i] = (rand() % 100) / 100.0 + 0.5;
-	}
-}
+// NEIGBOUR_NUM is given as a parameter to the prediction function.
+//int NEIGHBOUR_NUM = 2; //number of neighbors for kNN
+int RECOPOINTS_NUM = 5; //number of neighbors for distance learning
 
-float dist(float* feat1, float* feat2, float* weight) {
+//Algorithmic Parameters
+float POWER = 0.1; //not used in this code
+
+float dist(float* feat1, float* feat2, float* weight, float power) {
 	float toret = 0;
 	for (int i = 0; i < FEAT_NUM; i++) {
 		if (feat1[i] != -1 and feat2[i] != -1) {
@@ -46,89 +34,70 @@
 	return toret;
 }
 
-void alg_recommend2(float** feat, int* featclasses, int featlen, float* weight) {
-	float* distlist = new float[featlen];
-	int* recogoodlist = new int[RECOPOINTS_NUM];
-	int* recobadlist = new int[RECOPOINTS_NUM];
+/* Recommends the best weights using the training
+ * set (feat, labels).
+ */
+/* The function used to be:
+ * //void alg_recommend2(float** feat, float* weight, int start, int end) {
+ */
+extern "C"
+void recommend_weight(float **feat, int *labels, int n, float *weight,
+                      int start, int end) {
+    float *distlist = new float[n];
+    int *recogoodlist = new int[RECOPOINTS_NUM];
+    int *recobadlist = new int[RECOPOINTS_NUM];
 
-	for (int i = 0; i < ROUND_NUM/featlen; i++) {
-		int id = i % featlen;
-		printf("\rLearning weights... %d (%d-%d)", i, 0, ROUND_NUM/featlen);
+	for (int i = start; i < end; i++) {
+		printf("\rLearning distance... %d (%d-%d)", i, start, end);
 		fflush(stdout);
+        int cur_site = labels[i];
 
-		int trueclass = featclasses[id];
-/*
-		int cur_site, cur_inst;
-		if (id < CLOSED_SITENUM * CLOSED_INSTNUM) {
-			cur_site = id/CLOSED_INSTNUM;
-			cur_inst = id % CLOSED_INSTNUM;
-		}
-		else {
-			cur_site = CLOSED_SITENUM;
-			cur_inst = id - CLOSED_SITENUM * CLOSED_INSTNUM;
-		}
-*/
+		float pointbadness = 0;
+		float maxgooddist = 0;
 
-		//learn distance to other feat elements, put in distlist
-		for (int k = 0; k < featlen; k++) {
-			distlist[k] = dist(feat[id], feat[k], weight);
+		for (int k = 0; k < n; k++) {
+			distlist[k] = dist(feat[i], feat[k], weight, POWER);
 		}
-		//set my own distance to max
-		float max = *max_element(distlist, distlist+featlen);
-		distlist[id] = max;
 
-		float pointbadness = 0;
-		float maxgooddist = 0; //the greatest distance of all the good neighbours NEIGHBOUR_NUM
-		
-		//find the good neighbors: NEIGHBOUR_NUM lowest distlist values of the same class
-		for (int k = 0; k < RECOPOINTS_NUM; k++) {
-			int minind; //ind of minimum element of distlist
-			float mindist = max;
-			for (int dind = 0; dind < featlen; dind++) {
-				if (featclasses[dind] == trueclass and distlist[dind] < mindist) {
-					minind = dind;
-					mindist = distlist[dind];
-				}
-			}
-			if (distlist[minind] > maxgooddist) maxgooddist = distlist[minind];
-			distlist[minind] = max;
-			recogoodlist[k] = minind;
-		}
-		for (int dind = 0; dind < featlen; dind++) {
-			if (featclasses[dind] == trueclass) {
-				distlist[dind] = max;
-			}
-		}
-		for (int k = 0; k < RECOPOINTS_NUM; k++) {
-			int ind = min_element(distlist, distlist+featlen) - distlist;
-			if (distlist[ind] <= maxgooddist) pointbadness += 1;
-			distlist[ind] = max;
-			recobadlist[k] = ind;
-		}
+		float max = *max_element(distlist, distlist+n);
 
-		pointbadness /= float(RECOPOINTS_NUM);
-		pointbadness += 0.2;
-		/*
-		if (i == 0) {
-			float gooddist = 0;
-			float baddist = 0;
-			printf("Current point: %d\n", i);
-			printf("Bad points:\n");
-			for (int k = 0; k < RECOPOINTS_NUM; k++) {
-				printf("%d, %f\n", recobadlist[k], dist(feat[i], feat[recobadlist[k]], weight));	
-				baddist += dist(feat[i], feat[recobadlist[k]], weight);
-			}
+        distlist[i] = max;
+        for (int k = 0; k < RECOPOINTS_NUM; k++) {
+            /* Find the nearest neighbour to feat[i] having the same label. */
+            int ind = min_element(distlist, distlist+n) - distlist;
+            while (labels[ind] != cur_site) {
+                distlist[ind] = max;
+                ind = min_element(distlist, distlist+n) - distlist;
+            }
+            /* Keep track of the maximum distance of an object with the
+             * same label.
+             */
+            if (distlist[ind] > maxgooddist)
+                maxgooddist = distlist[ind];
+            /* Remove the neighbour, record it, and repeat. */
+            distlist[ind] = max;
+            recogoodlist[k] = ind;
+        }
 
-			printf("Good points:\n");
-			for (int k = 0; k < RECOPOINTS_NUM; k++) {
-				printf("%d, %f\n", recogoodlist[k], dist(feat[i], feat[recogoodlist[k]], weight));
-				gooddist += dist(feat[i], feat[recogoodlist[k]], weight);
-			}
+        /* Set to max the distance to the neighbours of the same label. */
+        for (int k = 0; k < n; k++)
+            if (labels[k] == cur_site)
+                distlist[k] = max;
 
-			printf("Total bad distance: %f\n", baddist);
-			printf("Total good distance: %f\n", gooddist);
-		}*/
+        /* Find the nearest neighbour to feat[i] having a different label. */
+        for (int k = 0; k < RECOPOINTS_NUM; k++) {
+            int ind = min_element(distlist, distlist+n) - distlist;
+            /* Sum number of bad points (up to RECOPOINTS_NUM). */
+            if (distlist[ind] <= maxgooddist)
+                pointbadness += 1;
+            /* Remove the neighbour, record it, and repeat. */
+            distlist[ind] = max;
+            recobadlist[k] = ind;
+        }
 
+		pointbadness /= float(RECOPOINTS_NUM);
+		pointbadness += 0.2;
+
 		float* featdist = new float[FEAT_NUM];
 		for (int f = 0; f < FEAT_NUM; f++) {
 			featdist[f] = 0;
@@ -138,23 +107,23 @@
 		int countbadlist = 0;
 		//printf("%d ", badlist[3]);
 		for (int f = 0; f < FEAT_NUM; f++) {
+			/* Bug note. In the original code, the following was:
+             *      if (weight[f] == 0) badlist[f] == 0;
+             */
 			if (weight[f] == 0) badlist[f] = 0;
 			else {
 			float maxgood = 0;
 			int countbad = 0;
 			for (int k = 0; k < RECOPOINTS_NUM; k++) {
-				float n = abs(feat[id][f] - feat[recogoodlist[k]][f]);
-				if (feat[id][f] == -1 or feat[recogoodlist[k]][f] == -1) 
+				float n = abs(feat[i][f] - feat[recogoodlist[k]][f]);
+				if (feat[i][f] == -1 or feat[recobadlist[k]][f] == -1) 
 					n = 0;
 				if (n >= maxgood) maxgood = n;
 			}
 			for (int k = 0; k < RECOPOINTS_NUM; k++) {
-				float n = abs(feat[id][f] - feat[recobadlist[k]][f]);
-				if (feat[id][f] == -1 or feat[recobadlist[k]][f] == -1) 
+				float n = abs(feat[i][f] - feat[recobadlist[k]][f]);
+				if (feat[i][f] == -1 or feat[recobadlist[k]][f] == -1) 
 					n = 0;
-				//if (f == 3) {
-				//	printf("%d %d %f %f\n", i, k, n, maxgood);
-				//}
 				featdist[f] += n;
 				if (n <= maxgood) countbad += 1;
 			}
@@ -175,8 +144,7 @@
 		for (int f = 0; f < FEAT_NUM; f++) {
 			if (badlist[f] != minbadlist) {
 				w0id[temp] = f;
-				change[temp] = weight[f] * 0.02 * badlist[f]/float(RECOPOINTS_NUM); //* pointbadness;
-				//if (change[temp] < 1.0/1000) change[temp] = weight[f];
+				change[temp] = weight[f] * 0.01 * badlist[f]/float(RECOPOINTS_NUM) * pointbadness;
 				C1 += change[temp] * featdist[f];
 				C2 += change[temp];
 				weight[f] -= change[temp];
@@ -184,12 +152,6 @@
 			}
 		}
 
-		/*if (i == 0) {
-			printf("%d %f %f\n", countbadlist, C1, C2);
-			for (int f = 0; f < 30; f++) {
-				printf("%f %f\n", weight[f], featdist[f]);
-			}
-		}*/
 		float totalfd = 0;
 		for (int f = 0; f < FEAT_NUM; f++) {
 			if (badlist[f] == minbadlist and weight[f] > 0) {
@@ -203,33 +165,6 @@
 			}
 		}
 
-		/*if (i == 0) {
-			printf("%d %f %f\n", countbadlist, C1, C2);
-			for (int f = 0; f < 30; f++) {
-				printf("%f %f\n", weight[f], featdist[f]);
-			}
-		}*/
-
-		/*if (i == 0) {
-			float gooddist = 0;
-			float baddist = 0;
-			printf("Current point: %d\n", i);
-			printf("Bad points:\n");
-			for (int k = 0; k < RECOPOINTS_NUM; k++) {
-				printf("%d, %f\n", recobadlist[k], dist(feat[i], feat[recobadlist[k]], weight));	
-				baddist += dist(feat[i], feat[recobadlist[k]], weight);
-			}
-
-			printf("Good points:\n");
-			for (int k = 0; k < RECOPOINTS_NUM; k++) {
-				printf("%d, %f\n", recogoodlist[k], dist(feat[i], feat[recogoodlist[k]], weight));
-				gooddist += dist(feat[i], feat[recogoodlist[k]], weight,);
-			}
-
-			printf("Total bad distance: %f\n", baddist);
-			printf("Total good distance: %f\n", gooddist);
-		}*/
-		
 		delete[] featdist;
 		delete[] w0id;
 		delete[] change;
@@ -237,10 +172,10 @@
 	}
 
 
-	/*for (int j = 0; j < FEAT_NUM; j++) {
+	for (int j = 0; j < FEAT_NUM; j++) {
 		if (weight[j] > 0)
 			weight[j] *= (0.9 + (rand() % 100) / 500.0);
-	}*/
+	}
 	printf("\n");
 	delete[] distlist;
 	delete[] recobadlist;
@@ -250,336 +185,146 @@
 
 }
 
-void accuracy(float** trainfeat, float** testfeat, int* trainfeatclasses, int* testfeatclasses, int trainlen, int testlen, float* weight) {
-	float* distlist = new float[trainlen];
+/* Returns predictions of the k-NN attack using training data
+ * (feat_train, labels_train) against test data feat_test.
+ * It uses trained weights weight. It returns the results in
+ * an array of int, predictions, which should be initialised before.
+ * Array predictions will contain one of {0, ..., n_labels-1} for
+ * labels, or "-1" for non-monitored pages (i.e., where there is no
+ * consensus among the neighbours).
+ */
+/* Used to be:
+ *  void accuracy(float** closedfeat, float* weight, float** openfeat, float & tp, float & tn) {
+ */
+extern "C"
+void knn_predict(float **feat_train, int *labels_train, float **feat_test,
+                 int n_train, int n_test, int n_labels, int n_neighbours,
+                 float *weight, int *predictions) {
 
-	printf("trainlen %d testlen %d\n", trainlen, testlen);
+    float *distlist = new float[n_train];
+    int *classlist = new int[n_labels + 1]; /* Count of neighbours per label */
 
-	int tp = 0;
-	int fp = 0;
-	int p = 0;
-	int n = 0;
-	for (int is = 0; is < testlen; is++) {
+    printf("Running k-NN attack for k=%d\n", n_neighbours);
 
-		int trueclass = testfeatclasses[is];
-		
 
-		map<int, int> classlist;
-		printf("\rComputing accuracy... %d (%d-%d)", is, 0, testlen);
-		fflush(stdout);
-		for (int at = 0; at < trainlen; at++) {
-			distlist[at] = dist(testfeat[is], trainfeat[at], weight);
-		}
-		float max = *max_element(distlist, distlist+trainlen);
+    for (int is = 0; is < n_test; is ++) {
 
-		//log the match score of each class
-		FILE * flog;
-		flog = fopen("flearner.results", "a");
-		fprintf(flog, "%d", trueclass);
+        /* Reset classlist */
+        for (int i = 0; i < n_labels+1; i++) {
+            classlist[i] = 0;
+        }
 
-		int CLASS_NUM = atoi(d["CLOSED_SITENUM"].c_str());
-		if (atoi(d["OPEN_INSTNUM"].c_str()) > 0) CLASS_NUM += 1;
+        int maxclass = 0;       /* Most frequent class among neighbours */
+        /* NOTE: the original code computes the distance also from the
+         * test instances. But this is incorrect, because the adversary
+         * does not have access to the test instances' labels.
+         * We should thus only compute distances from training instances.
+         */
+        for (int at = 0; at < n_train; at++) {
+            distlist[at] = dist(feat_test[is], feat_train[at], weight, POWER);
+        }
 
-		map<int, float> match;
-		for (int i = 0; i < CLASS_NUM; i++) {
-			match[i] = max;
-		}
-		for (int at = 0; at < trainlen; at++) {
-			int classind = trainfeatclasses[at];
-			if (classind == -1) classind = CLASS_NUM-1;
-			if (distlist[at] < match[classind]) match[classind] = distlist[at];
-		}
-		//additive inverse is match
+        float max = *max_element(distlist, distlist+n_train);
+        /* NOTE: the original code now sets the distance to the current
+         * instance to max. There's no need to do that here, because
+         * distlist only contains distances from training instances
+         * (which the current instance is not).
+         */
+        /* Find the n_neighbours neighbours */
+        for (int i = 0; i < n_neighbours; i++) {
+            int ind = find(distlist, distlist+n_train,
+                           *min_element(distlist, distlist+n_train)) - distlist;
+            /* NOTE: there should be no need to do the following
+             * (commented out), because there
+             * is no distance from open world instances. In fact, by
+             * definition, the adversary should not observe them if not
+             * _individually_ (unless we were assuming some sort of on-line
+             * learning, which we are not) during the test phase as test
+             * objects..
+             */
+			//int classind = 0;
+			//if (ind < SITE_NUM * TEST_NUM) {
+			//	classind = ind/TEST_NUM;
+			//}
+			//else {
+			//	classind = SITE_NUM;
+			//}
+			//classlist[classind] += 1;
 
-		for (int i = 0; i < CLASS_NUM; i++) {
-			match[i] = max - match[i];
-			fprintf(flog, "\t%f", match[i]);
-		}
-		fprintf(flog, "\n");
-		
-		int guessclass = 0;
-		int maxclass = 0;
+            /* Now the class is certainly from the training set */
+            int classind = labels_train[ind];
+            classlist[classind] += 1;
 
-		for (int i = 0; i < NEIGHBOUR_NUM; i++) {
-			int ind = find(distlist, distlist + trainlen, *min_element(distlist, distlist+trainlen)) - distlist;
-			int classind = trainfeatclasses[ind];
-			if(classlist.find(classind) == classlist.end()) classlist[classind] = 1;
-			else classlist[classind] += 1;
-
 			if (classlist[classind] > maxclass) {
 				maxclass = classlist[classind];
-				guessclass = classind;
 			}
+            /* Exclude the neighbour we just found from the distances list */
 			distlist[ind] = max;
 		}
 
-		
-		
-		if (OPEN_MAJORITY == 1) {
-			float hasconsensus = 0;
-			/*float score1 = 1.4; 
-			float score2 = 0; //score1 >= score2
-			float score3 = 1;
-			hasconsensus += classlist[guessclass] * score1;
-			for (int i = 0; i < CLOSED_SITENUM; i++) {
-				hasconsensus -= classlist[i] * score2;
+        /* Predicts the label or "-1" ("non-monitored") if no consensus.
+         * There is consensus ONLY IF one of classlist entries is
+         * equal to n_neighbours. This also means that if there
+         * is consensus then only one entry of classlist is
+         * non-zero (precisely, it is equal to n_neighbours).
+         */
+        int predicted_label = -1;
+		for (int i = 0; i < n_labels+1; i++) {
+			if (classlist[i] == n_neighbours) {
+                predicted_label = i;
+                break;
 			}
-			if (OPEN_INSTNUM > 0) hasconsensus -= classlist[CLOSED_SITENUM] * score3;*/
-			if (classlist[guessclass] == NEIGHBOUR_NUM) hasconsensus = 1;
-			/*if (hasconsensus > 0 and guessclass != CLOSED_SITENUM) {		
-				//double check consensus: if distance is too high, it also doesn't work
-				//repeat 100 times
-				
-				float d_true = 0;
-				int ind1, ind2;
-			
-				for (int i = 0; i < 20; i++) {
-					ind1 = guessclass * CLOSED_INSTNUM + rand() % CLOSED_INSTNUM;
-					float min = -1;
-					float cur_d = 0;
-				
-					for (int j = 0; j < CLOSED_INSTNUM; j++) {
-						ind2 = guessclass * CLOSED_INSTNUM + j;
-						if (ind2 != ind1) {
-							cur_d = dist(trainfeat[ind1], trainfeat[ind2], weight);
-							if (cur_d < min or min == -1) min = cur_d;
-						}
-					}
-					
-					d_true += min;
-				}
-				d_true /= 20;
-				
-				//printf("d_true: %f, d_guess: %f", d_true, d_guess);
-				
-				if (d_guess > d_true * 1.25) {
-					hasconsensus = -1;
-				}
-				
-				
-			}*/
-		
-		
-			if (hasconsensus <= 0) {
-				guessclass = -1;
-			}
 		}
-		if (guessclass != -1) {
-			if (trueclass == guessclass) tp += 1;
-			else fp += 1;
-		}
-		if (trueclass == -1) n += 1;
-		else p += 1;
-		printf("%d %d %d %d\n", tp, fp, p, n);
-		fclose(flog);
-	}
 
-	printf("\n");
+        predictions[is] = predicted_label;
 
-	delete[] distlist;
-}
+        /* NOTE on the original code, which is commented out as we
+         * compute the accuracy on the callee function:
+         * if more than one class was predicted, the accuracy would be
+         * divided by the number of classes. However this does not
+         * follows what the original paper says, i.e.:
+         *     "a point should be classified as a monitored page only
+         *     if all k neighbours agree on which page it is, and
+         *     otherwise it will be classified as a non-monitored page".
+         * Nevertheless, this (i.e., countclass > 1) should never happen
+         * because: if there is consensus then only one entry of classlist
+         * is non-zero; if there is no consensus, the original code
+         * sets the entries 0..n_labels of classlist to 0, and
+         * classlist[n_labels+1] = 1 and maxclass = 1, meaning that
+         * countclass will be 1 (only "non monitored" class n_labels+1 is
+         * non-zero).
+         */
 
-//reads fname (a file name) for a single file
-void read_feat(float* feat, string fname) {
-	ifstream fread;
-	fread.open(fname.c_str());
-	string str = "";
-	getline(fread, str);
-	fread.close();
+		//float thisacc = 0;
+		//if (hasconsensus == 0) {
+		//	for (int i = 0; i < SITE_NUM; i++) {
+		//		classlist[i] = 0;
+		//	}
+		//	classlist[SITE_NUM] = 1;
+		//	maxclass = 1;
+		//}
 
-	string tempstr = "";
-	int feat_count = 0;
-	for (int i = 0; i < str.length(); i++) {
-		if (str[i] == ' ') {
-			if (tempstr.c_str()[1] == 'X') {
-				feat[feat_count] = -1;
-			}
-			else {
-				feat[feat_count] = atof(tempstr.c_str());
-			}	
-			feat_count += 1;
-			tempstr = "";
-		}
-		else {
-			tempstr += str[i];
-		}
-	}
+		//for (int i = 0; i < SITE_NUM+1; i++) {
+		//	if (classlist[i] == maxclass) {
+		//		countclass += 1;
+		//		if (i == trueclass) {
+		//			hascorrect = 1;
+		//		}
+		//	}
+		//}
 
-}
-
-void read_filelist(float ** feat, int * featclasses, int featlen, string fname) {
-	ifstream fread;
-	fread.open(fname.c_str());
-	
-	int readcount = 0;
-	while (fread.peek() != EOF) {
-		string str = "";
-		string rstr = "";
-		getline(fread, rstr);
-		int found = rstr.find_last_of("/");
-		str = rstr.substr(found+1);
-		str = str.substr(0, str.find_first_of("."));
-		//closed or open?
-		if (str.find("-") != string::npos) {
-			//this means closed
-			string str1 = str.substr(0, str.find_first_of("-"));
-			string str2 = str.substr(str.find_first_of("-")+1);
-			int s = atoi(str1.c_str());
-			int i = atoi(str2.c_str());
-			read_feat(feat[readcount], rstr + "f");
-			featclasses[readcount] = s;
-		}
-		else {
-			/this means open
-			read_feat(feat[readcount], rstr + "f");
-			featclasses[readcount] = -1;
-		}
-		readcount += 1;
+		//if (hascorrect == 1) {
+		//	thisacc = 1.0/countclass;
+		//}
+		//if (trueclass == SITE_NUM) {
+		//	tn += thisacc;
+		//}
+		//else { 
+		//	tp += thisacc;
+		//}
+		
 	}
-}
 
-int read_filelen(string fname) {
-	int featlen = 0;
-	
-	//one round to learn the length... 
-	ifstream fread;
-	fread.open(fname.c_str());
-	while (fread.peek() != EOF) {
-		string str = "";
-		getline(fread, str);
-		featlen += 1;
-	}
-	fread.close();
-	
-	return featlen;
-}
-
-void read_options(string fname) {
-//	std::map <string, string> d;
-	ifstream fread;
-	fread.open(fname.c_str());
-	while (fread.peek() != EOF) {
-		string str = "";
-		getline(fread, str);
-		while (str.find("#") != string::npos)
-			str = str.substr(0, str.find_first_of("#"));
-		if (str.find("\t") != string::npos) {
-			string optname = str.substr(0, str.find_first_of("\t"));
-			string optval = str.substr(str.find_first_of("\t")+1);
-			d[optname] = optval;
-		}
-	}
-	fread.close();
-}
-
-int get_featnum(string folder) {
-	//Guess feat num so feat set can be changed without changing this code
-	
-	ostringstream freadnamestream;
-	freadnamestream << folder << "0-0.cellf";
-	string freadname = freadnamestream.str();
-	
-	ifstream fread;
-	fread.open(freadname.c_str());
-	string str = "";
-	getline(fread, str);
-	fread.close();
-
-	int feat_count = 0;
-	for (int i = 0; i < str.length(); i++) {
-		if (str[i] == ' ') {
-			feat_count += 1;
-		}
-	}
-	
-	return feat_count;
-}
-
-
-int main(int argc, char** argv) {
-	/*int OPENTEST_list [6] = {100, 500, 1000, 3000, 5000, 6000};
-	int NEIGHBOUR_list [10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
-
-	if(argc == 3){
-		int OPENTEST_ind = atoi(argv[1]); 
-		int NEIGHBOUR_ind = atoi(argv[2]);
-
-		OPEN_INSTNUM = OPENTEST_list[OPENTEST_ind % 5];
-		NEIGHBOUR_NUM = NEIGHBOUR_list[NEIGHBOUR_ind % 10];
-	}*/
-
-	srand(time(NULL));
-
-	if(argc != 2){
-	    cout <<"call: ./flearner optname"<<endl;
-	    exit(1);
-	}
-	char* optionname = argv[1];
-	read_options(string(optionname));
-	FEAT_NUM = get_featnum(d["DATA_LOC"]);
-	
-	//learn weights
-	int wlen = read_filelen(d["WEIGHT_LIST"]);
-	float** wfeat = new float*[wlen];
-	int * wfeatclasses;
-	for (int i = 0; i < wlen; i++) {
-		wfeat[i] = new float[FEAT_NUM];
-	}
-	wfeatclasses = new int[wlen];
-	read_filelist(wfeat, wfeatclasses, wlen, d["WEIGHT_LIST"]);
-	printf("here\n");
-
-	float * weight = new float[FEAT_NUM];
-	alg_init_weight(weight);
-	clock_t t1, t2;
-	float train_time, test_time;
-	t1 = clock();
-	alg_recommend2(wfeat, wfeatclasses, wlen, weight);
-	t2 = clock();
-	train_time = (t2 - t1)/float(CLOCKS_PER_SEC);
-
-	//load training instances
-	float** trainfeat;
-	int * trainfeatclasses;
-	int trainlen = read_filelen(d["TRAIN_LIST"]);
-	trainfeat = new float*[trainlen];
-	for (int i = 0; i < trainlen; i++) {
-		trainfeat[i] = new float[FEAT_NUM];
-	}
-	trainfeatclasses = new int[trainlen];
-	read_filelist(trainfeat, trainfeatclasses, trainlen, d["TRAIN_LIST"]);
-
-	//Load testing instances
-	float** testfeat;
-	int * testfeatclasses;
-	int testlen = read_filelen(d["TEST_LIST"]);
-	testfeat = new float*[testlen];
-	for (int i = 0; i < testlen; i++) {
-		testfeat[i] = new float[FEAT_NUM];
-	}
-	testfeatclasses = new int[testlen];
-	read_filelist(testfeat, testfeatclasses, testlen, d["TEST_LIST"]);
-	printf("Training and testing instances loaded\n");
-	
-	int tpc, tnc, pc, nc;
-	t1 = clock();
-	accuracy(trainfeat, testfeat, trainfeatclasses, testfeatclasses, trainlen, testlen, weight);
-	t2 = clock();
-	test_time = (t2 - t1)/float(CLOCKS_PER_SEC);
-
-	for (int i = 0; i < wlen; i++) {
-		delete[] wfeat[i];
-	}
-	delete[] wfeat;
-	for (int i = 0; i < trainlen; i++) {
-		delete[] trainfeat[i];
-	}
-	delete[] trainfeat;
-	for (int i = 0; i < testlen; i++) {
-		delete[] testfeat[i];
-	}
-	delete[] testfeat;
-
-	delete[] weight;
-	return 0;
+	delete[] distlist;
+	delete[] classlist;
 }
